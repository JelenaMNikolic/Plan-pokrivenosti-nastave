/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.ppn;

import controller.Controller;
import domain.Katedra;
import domain.Nastavnik;
import domain.PlanPokrivenostiNastave;
import domain.Predmet;
import domain.StavkaPPN;
import form.FormMain;
import form.FormMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.PPNTableModel;
import session.Session;
import slucajkoriscenja.SlucajKoriscenja;
import validator.Validator;

/**
 *
 * @author Korisnik
 */
public class DialogNoviPPN extends javax.swing.JDialog {

    List<StavkaPPN> stavke;
    int izmena = 0;

    /**
     * Creates new form DialogNoviPPN
     *
     * @param parent
     * @param modal
     */
    public DialogNoviPPN(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
    }

    public DialogNoviPPN(java.awt.Frame aThis, boolean b, FormMode formMode) {
        super(aThis, b);
        initComponents();
        Nastavnik ulogovan = Session.getInstance().getUlogovan();
        jLblUlogovan.setText(ulogovan.toString());
        this.setLocationRelativeTo(null);
        stavke = new ArrayList<>();
        populateTable();
        populateCombo();
        postaviKomponente(formMode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLblUlogovan = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtGodina = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        btnObrisi = new javax.swing.JButton();
        btnIzmeniStavku = new javax.swing.JButton();
        pnlStavke = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cmbPredmet = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbNastavnik = new javax.swing.JComboBox();
        btnDodajNoviUnosUPPN = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();
        btnSacuvajPPN = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Nastavnik"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblUlogovan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblUlogovan, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Plan pokrivenosti nastave"));

        jLabel1.setText("Godina:");

        jLabel2.setText("Plan pokrivenosti:");

        tblStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblStavke);

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnIzmeniStavku.setText("Izmeni");
        btnIzmeniStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniStavkuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(txtGodina))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnIzmeniStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnObrisi)
                    .addComponent(btnIzmeniStavku))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlStavke.setBorder(javax.swing.BorderFactory.createTitledBorder("Nova stavka"));

        jLabel4.setText("Predmet:");

        cmbPredmet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPredmet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPredmetActionPerformed(evt);
            }
        });

        jLabel5.setText("Nastavnik:");

        cmbNastavnik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnDodajNoviUnosUPPN.setText("Dodaj");
        btnDodajNoviUnosUPPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajNoviUnosUPPNActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStavkeLayout = new javax.swing.GroupLayout(pnlStavke);
        pnlStavke.setLayout(pnlStavkeLayout);
        pnlStavkeLayout.setHorizontalGroup(
            pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStavkeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbPredmet, 0, 404, Short.MAX_VALUE)
                    .addComponent(cmbNastavnik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStavkeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDodajNoviUnosUPPN, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOtkazi, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        pnlStavkeLayout.setVerticalGroup(
            pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStavkeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbPredmet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbNastavnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlStavkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajNoviUnosUPPN)
                    .addComponent(btnOtkazi))
                .addGap(36, 36, 36))
        );

        btnSacuvajPPN.setText("Sacuvaj novi PPN");
        btnSacuvajPPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajPPNActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Sacuvaj izmene");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvajPPN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIzmeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlStavke, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlStavke, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvajPPN)
                    .addComponent(btnIzmeni)
                    .addComponent(btnOK))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbPredmetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPredmetActionPerformed
        populateNastavnike((Predmet) cmbPredmet.getSelectedItem());
    }//GEN-LAST:event_cmbPredmetActionPerformed

    private void btnDodajNoviUnosUPPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajNoviUnosUPPNActionPerformed
        Predmet predmet = (Predmet) cmbPredmet.getSelectedItem();
        Nastavnik nastavnik = (Nastavnik) cmbNastavnik.getSelectedItem();
        if (Validator.getInstance().imaStavka(stavke, predmet, nastavnik)) {
            StavkaPPN stavka = new StavkaPPN(-1, predmet, nastavnik);
            if(Session.getInstance().getTrenutniSlucajKoriscenja() == SlucajKoriscenja.SK_IZMENI_PPN) {
                PlanPokrivenostiNastave trenutni = (PlanPokrivenostiNastave) Session.getInstance().getParametriSK().get("ppn");
                stavka.setStavkaPPNId(trenutni.getPpnId());
            }
            PPNTableModel model = (PPNTableModel) tblStavke.getModel();
            if (izmena == 1) {
                int row = tblStavke.getSelectedRow();
                model.izmeniStavku(stavka, row);
            } else {
                model.addStavka(stavka);
            }
            izmena = 0;
            izmeniFormu(izmena);
        } else {
            JOptionPane.showMessageDialog(this, "Ne mogu postojati dva ista unosa u planu.");
        }
    }//GEN-LAST:event_btnDodajNoviUnosUPPNActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        PPNTableModel model = (PPNTableModel) tblStavke.getModel();
        int row = tblStavke.getSelectedRow();
        if (row != -1) {
            model.obrisiStavku(row);
        } else {
            JOptionPane.showMessageDialog(this, "Izaberite red koji zelite da obrisete.");
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnIzmeniStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniStavkuActionPerformed
        PPNTableModel model = (PPNTableModel) tblStavke.getModel();
        int row = tblStavke.getSelectedRow();
        if (row != -1) {
            cmbPredmet.setSelectedItem(tblStavke.getValueAt(row, 0));
            populateNastavnike((Predmet) tblStavke.getValueAt(row, 0));
            cmbNastavnik.setSelectedItem(tblStavke.getValueAt(row, 1));
            izmena = 1;
            izmeniFormu(izmena);
        } else {
            JOptionPane.showMessageDialog(this, "Izaberite red koji zelite da obrisete.");
        }
    }//GEN-LAST:event_btnIzmeniStavkuActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
            String god = txtGodina.getText().trim();
            if (!god.isEmpty()) {
                Date godina = sdf.parse(god);
                PlanPokrivenostiNastave zaIzmenu = (PlanPokrivenostiNastave) Session.getInstance().getParametriSK().get("ppn");
                PPNTableModel model = (PPNTableModel) tblStavke.getModel();
                stavke = model.getStavke();
                PlanPokrivenostiNastave ppn = new PlanPokrivenostiNastave(zaIzmenu.getPpnId(), godina, stavke);
                try {
                    if (!Validator.getInstance().postoji(ppn)) {
                        if (Validator.getInstance().uneteStavke(stavke)) {
                            String poruka = Controller.getInstance().izmeniPPN(ppn);
                            JOptionPane.showMessageDialog(this, poruka);
                            FormPretraziPPN pretrazi = (FormPretraziPPN) this.getParent();
                            pretrazi.updateData(ppn);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Unesite stavke plana.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Plan za zadatu godinu vec postoji.");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(DialogNoviPPN.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Unesite godinu.");
            }
        } catch (ParseException ex) {
            Logger.getLogger(DialogNoviPPN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        izmena = 0;
        izmeniFormu(izmena);
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnSacuvajPPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajPPNActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
            String god = txtGodina.getText().trim();
            if (!god.isEmpty()) {
                Date godina = sdf.parse(god);
                PlanPokrivenostiNastave ppn = new PlanPokrivenostiNastave(-1, godina, stavke);
                try {
                    if (!Validator.getInstance().postoji(ppn)) {
                        if (Validator.getInstance().uneteStavke(stavke)) {
                            String poruka = Controller.getInstance().savePPN(ppn);
                            JOptionPane.showMessageDialog(this, poruka);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Unesite stavke plana.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Plan za zadatu godinu vec postoji.");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(DialogNoviPPN.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Unesite godinu.");
            }
        } catch (ParseException ex) {
            Logger.getLogger(DialogNoviPPN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSacuvajPPNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogNoviPPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogNoviPPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogNoviPPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogNoviPPN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogNoviPPN dialog = new DialogNoviPPN(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajNoviUnosUPPN;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnIzmeniStavku;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnSacuvajPPN;
    private javax.swing.JComboBox cmbNastavnik;
    private javax.swing.JComboBox cmbPredmet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLblUlogovan;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlStavke;
    private javax.swing.JTable tblStavke;
    private javax.swing.JTextField txtGodina;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        PPNTableModel tm = new PPNTableModel(stavke);
        tblStavke.setModel(tm);
    }

    private void populateCombo() {
        populatePredmete();
        populateNastavnike((Predmet) cmbPredmet.getSelectedItem());
    }

    private void populateNastavnike(Predmet predmet) {
        try {
            cmbNastavnik.removeAllItems();
            List<Nastavnik> nastavnici = Controller.getInstance().getAllNastavnici();
            for (Nastavnik nastavnik : nastavnici) {
                if (predmet != null && nastavnik.getKatedra().equals(predmet.getKatedra())) {
                    cmbNastavnik.addItem(nastavnik);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void populatePredmete() {
        try {
            cmbPredmet.removeAllItems();
            List<Predmet> predmeti = Controller.getInstance().getAllPredmeti();
            for (Predmet predmet : predmeti) {
                cmbPredmet.addItem(predmet);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() + "predmet");
        }
    }

    private void postaviKomponente(FormMode mode) {
        switch (mode) {
            case NOVI:
                pnlStavke.setVisible(true);
                btnIzmeni.setVisible(false);
                btnSacuvajPPN.setVisible(true);
                btnOK.setVisible(false);
                cmbPredmet.setEditable(false);
                btnOtkazi.setVisible(false);
                setTitle("Novi plan pokrivenosti nastave");
                break;
            case IZMENI:
                pnlStavke.setVisible(true);
                btnIzmeni.setVisible(true);
                btnSacuvajPPN.setVisible(false);
                btnOK.setVisible(false);
                btnOtkazi.setVisible(false);
                postaviPlan();
                setTitle("Izmena plana pokrivenosti nastave");
                break;
            case PRIKAZI:
                pnlStavke.setVisible(false);
                btnOK.setVisible(true);
                btnIzmeni.setVisible(false);
                btnSacuvajPPN.setVisible(false);
                btnOtkazi.setVisible(false);
                btnIzmeniStavku.setVisible(false);
                btnObrisi.setVisible(false);
                txtGodina.setEditable(false);
                postaviPlan();
                setTitle("Prikaz plana pokrivenosti nastave");
                break;
        }
    }

    private void izmeniFormu(int izmena) {
        switch (izmena) {
            case 1:
                btnIzmeniStavku.setEnabled(false);
                btnSacuvajPPN.setEnabled(false);
                btnObrisi.setEnabled(false);
                btnDodajNoviUnosUPPN.setText("Izmeni");
                btnOtkazi.setVisible(true);
                break;
            case 0:
                btnIzmeniStavku.setEnabled(true);
                btnSacuvajPPN.setEnabled(true);
                btnObrisi.setEnabled(true);
                btnDodajNoviUnosUPPN.setText("Dodaj");
                btnOtkazi.setVisible(false);
                break;
        }
    }

    private void postaviPlan() {
        PlanPokrivenostiNastave ppn = (PlanPokrivenostiNastave) Session.getInstance().getParametriSK().get("ppn");
        Calendar c = Calendar.getInstance();
        c.setTime(ppn.getGodina());
        int godina = c.get(Calendar.YEAR);
        txtGodina.setText(godina + "");
        PPNTableModel model = (PPNTableModel) tblStavke.getModel();
        model.setData(ppn.getStavkePPN());
        stavke = ppn.getStavkePPN();
    }
}
